@file:Suppress("UnstableApiUsage")

import net.fabricmc.loom.api.LoomGradleExtensionAPI
import java.text.SimpleDateFormat
import java.util.Date

plugins {
    id("architectury-plugin") version "3.4-SNAPSHOT"
    id("dev.architectury.loom") version "1.0-SNAPSHOT" apply false
    java
}

val minecraft_version: String by project
val mod_version: String by project
val maven_group: String by project
val archives_base_name: String by project

architectury {
    minecraft = minecraft_version
}

subprojects {
    apply(plugin = "dev.architectury.loom")

    val loom: LoomGradleExtensionAPI by extensions

    loom.silentMojangMappingsLicense()

    repositories {
        maven {
            name = "ParchmentMC"
            setUrl("https://maven.parchmentmc.org")
        }
    }

    dependencies {

        "minecraft"("com.mojang:minecraft:$minecraft_version")

        "mappings"(loom.layered {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-1.18.2:2022.11.06@zip")
        })

    }
}

allprojects {
    apply(plugin = "java")
    apply(plugin = "architectury-plugin")
    apply(plugin = "maven-publish")

    version = mod_version
    group = maven_group

    java.toolchain.languageVersion.set(JavaLanguageVersion.of(17))

    repositories {
        // Put repositories for dependencies here
        // ForgeGradle automatically adds the Forge maven and Maven Central for you

        // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
        // flatDir {
        //     dir 'libs'
        // }
    }

    // Include resources generated by data generators.
    sourceSets.main.configure {
        resources.srcDir("src/generated/resources")
    }

    tasks {
        withType<JavaCompile>().configureEach {
            options.release.set(17)
            options.encoding = "UTF-8" // Use the UTF-8 charset for Java compilation
        }

        jar {
            archiveBaseName.set(archives_base_name)
            manifest {
                attributes(mapOf(
                "Specification-Title"      to "fossil",
                "Specification-Vendor"     to "fossilsareus",
                "Specification-Version"    to "1", // We are version 1 of ourselves
                "Implementation-Title"     to project.name,
                "Implementation-Version"   to archiveVersion,
                "Implementation-Vendor"    to "fossilsareus",
                "Implementation-Timestamp" to SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ").format(Date())
                ))
            }
        }
    }
}